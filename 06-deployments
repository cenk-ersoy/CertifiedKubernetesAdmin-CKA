##############################################################
# deployments
#############################################################

# labels of the Deployment and Pod should match


# deleting the deployment does NOT delete Services. 

kubectl create deployment hello-world --image=gcr.io/google-samples/hello-app:1.0 --replicas=2
kubectl wait --for=condition=Ready pod -l app=hello-world
kubectl get pods -l app=hello-world


# check READY vs UP-TO-DATE columns to see if all replicas are running
kubectl get deployments -o wide

kubectl scale deployment hello-world --replicas=10

kubectl exec -it deployment/hello-world -- hostname

kubectl get deployment hello-world -o yaml > hello-world-deployment.yaml


# if you overwrite the label of a pod, it becomes "unmanaged"
# deployment controller will create a new pod but the old one will NOT be deleted
# this can be a debugging technique
kubectl get pods -l app=hello-world
kubectl label pods hello-world-xxxx app=nothello --overwrite
kubectl get pods 


# for rollout and rollback, you must record the Deployment
kubectl apply -f mydeploy.yaml --record
# wait until all pods are running
kubectl rollout status deployment mydeploy
kubectl rollout pause deployment hello-deploy
kubectl rollout resume deployment hello-deploy

kubectl rollout history deployment mydeploy
kubectl rollout undo deployment mydeploy --to-revision=1 
# wait until all pods are running


# you can change a deployment on the fly
kubectl edit deployment my-app


# you can also rollout daemonsets
kubectl rollout daemonset mydaemonset 


# there are multiple ways to change te behaviour of a container, pod or deployment

# you can change the container image version for the pods of a deployment
# new pods will be created, the change will be recorded
kubectl set image deployment/mydeploy nginx=nginx:1.9.1  --record 


# you can also  modify existing "environment" variables for Deployments
# it will re-create the pod 
kubectl set env deployment mydeploy ENV=prod

# check environment variable in a container
kubectl exec  mypod -- sh -c 'printenv | grep "^ABCD"'


# you can override the "command" and "arguments" of a container
kubectl exec mypod -- sh -c 'tail -f /dev/null'


# you can modify a running deployment by patching it with YAML file
kubectl patch deployment mydeploy --patch-file file1.yaml





##########################################################
# create a deployment for a simple "hello world" app
##########################################################
kubectl create deployment hello-world --image=gcr.io/google-samples/hello-app:1.0
kubectl describe deployment hello-world
kubectl get pods -o wide
curl <ip of the hello-world pod>:8080
kubectl get replicaset 
kubectl scale deployment hello-world --replicas=10
# this will connect to the first pod
kubectl exec -it deployment/hello-world  -- sh
hostname
wget -qO- localhost:8080
exit

# the following returns the name of one of the pods from a deployment
kubectl get pods | grep -i hello-world | awk '{print $1}' | head -n 1



###################################################
# scale and expose the deployment using ClusterIP
###################################################
kubectl scale deployment hello-world --replicas=5
kubectl get pods -o wide


# you can also use "horizontal pod autoscaler" to scale a deployment
kubectl autoscale deployment hello-world --cpu-percent=50 --min=1 --max=10


# when you expose a deployment, by default, ClusterIP type service will be created
kubectl expose deployment hello-world --name hello-world-service --port=80 --target-port=8080

# you can also create the service independently as follows 
# but the service is NOT associated with any pod or deployment
kubectl create service clusterip hello-world-service --tcp=80:8080


kubectl get service hello-world-service -o wide
kubectl get endpoints
# we are using IP address of the service endpoint instead of service name here 
# because "curl" runs on the node and the node does not know the DNS name of the service
curl <endpointIP>:port

# you can also test at the container level using the DNS name of the service
kubectl exec -it hello-world-xxxx  -- sh
# the pod knows the DNS name of the service (which is "hello-world-service")
# each time a different pod should reply
wget -qO- hello-world-service
wget -qO- hello-world-service
exit


# any pod in the cluster can access the ClusterIP service by name
kubectl exec -it nginx -- curl hello-world-service:80



##############################################################
# expose the deployment using NodePort
##############################################################
kubectl delete service hello-world
kubectl expose deployment hello-world --name hello-world-service --type=NodePort --port=80 --target-port=8080 
# you can dump the creation into a YAML file and add a specific port number for the Nodeport


# you can also create a standalone service 
# but it is not associated with any pod or deployment
kubectl create service nodeport hello-world --tcp=80:8080
# The NodePort is assigned a port number between 30,000 and 32,767.



kubectl get service hello-world-service -o wide
kubectl describe service hello-world-service
kubectl get endpoints
# we are using IP address of the service endpoint instead of service name here 
# because "curl" runs on the node and the node does not know the DNS name of the service
curl <IP of the NODE>:<Nodeport>



##############################################################
# expose the deployment using LoadBalancer
##############################################################
kubectl delete service hello-world
kubectl expose deployment hello-world --name hello-world-service --type=LoadBalancer --port=80 --target-port=8080 
# if there is no cloud provider, the status will be "Pending"

kubectl get service hello-world-service -o wide
kubectl describe service hello-world-service
kubectl get endpoints
# we are using IP address of the service endpoint instead of service name here 
# because "curl" runs on the node and the node does not know the DNS name of the service
curl <endpointIP>:80

